#!/bin/bash

#Variables
NAME="Harrison"
echo $NAME  #Harrison
echo "$NAME" #Harrison
echo "${NAME}!" #Harrison!

echo 'hi $NAME' #hi $NAME
echo "hi $NAME" #hi Harrison

#SHELL EXECUTION  
#$(command) or `command` executes and return output of a command 
echo "I'm in $(pwd)" #I'm in C://OneDrive - Sprint/Desktop/...
echo "I'm in `pwd`" #same

#CONDITIONAL EXECUTION
#Right side of && is only evaluated if left ends cleanly
## || is the opposite
git commit && git push
git commit || echo "Commit failed."

#FUNCTIONS
#you can pass parameters to the function after a space. 
#Evaluate a function and save results with var=$(function param1)
get_name() {
	echo "$1"
}
echo "You are $(get_name john)"


#CONDITIONALS
# [[ prevents word splitting of variable values analagous to string literal
# [ will seperate words and expand path if wildcards are present in variable
if [[ -z "$string" ]]; then

#RETURNING FUNCTIONS
func() {
	echo "hello $1"
}
result="$(func taco)"
echo $result


elif [[ -n "$string" ]]; then
	echo "String is not empty"
fi
#[ -a FILE ] -> check if file exists
#[ -d FILE ] -> check if file is dir
#[ -f FILE ] -> check if file is regular file
#[ !EXPR ] -> true if EXPR is false
#[ (EXPR) ] -> return the value of EXPR
#[ EXPR1 -o EXPR2 ] -> true if EXPR1 OR EXPR2
# $# is the number of command line args
# $0 is the name of the script
if [ ! $#==0 ]
then
	echo"Usage: $0 param1"
fi


#PARAMETER EXPANSION
NAME="HARRISON"
echo ${NAME}
echo ${NAME/HAR/har} #Replace First match -> harRISON
echo ${NAME::2} #Slicing -> HA
echo ${NAME::-1} # -> HARRISO

#ARRAYS
Fruits=('apple' 'banana')
echo ${Fruits[0]}

#REDIRECTING OUTPUT
# >    stdout to file
# >>    stdout to file, append
# <     feed file to left




